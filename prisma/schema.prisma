// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password_hash String?
  time_zone     String?
  role          Role      @relation(fields: [role_id], references: [id])
  role_id       Int       @default(1) // Default role ID for new users
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id             Int             @id @default(autoincrement())
  name           String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now()) @updatedAt
  users          User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id             Int             @id @default(autoincrement())
  name           String
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  role          Role       @relation(fields: [role_id], references: [id])
  role_id       Int
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id Int

  @@id([role_id, permission_id])
  @@map("role_permissions")
}
